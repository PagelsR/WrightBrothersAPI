using Microsoft.AspNetCore.Mvc;
using WrightBrothersApi.Models;

namespace WrightBrothersApi.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class PlanesController : ControllerBase
    {
        private readonly ILogger<PlanesController> _logger;

        public PlanesController(ILogger<PlanesController> logger)
        {
            _logger = logger;
        }

        private static readonly List<Plane> Planes = new List<Plane>
        {
            new Plane
            {
                Id = 1,
                Name = "Wright Flyer",
                Year = 1903,
                Description = "The first successful heavier-than-air powered aircraft.",
                RangeInKm = 12,
                ImageUrl = "https://example.com/images/wright-flyer.jpg"
            },
            new Plane
            {
                Id = 2,
                Name = "Wright Flyer II",
                Year = 1904,
                Description = "A refinement of the original Flyer with better performance.",
                RangeInKm = 24,
                ImageUrl = "https://example.com/images/wright-flyer-ii.jpg"
            },
            new Plane
            {
                Id = 3,
                Name = "Wright Model A",
                Year = 1908,
                Description = "The first commercially successful airplane.",
                RangeInKm = 40,
                ImageUrl = "https://example.com/images/wright-model-a.jpg"
            },
            new Plane
            {
                Id = 4,
                Name = "Wright Model B",
                Year = 1910,
                Description = "The first mass-produced airplane.",
                RangeInKm = 60,
                ImageUrl = "https://example.com/images/wright-model-b.jpg"
            },
            new Plane
            {
                Id = 5,
                Name = "Wright Model C",
                Year = 1912,
                Description = "A two-seat biplane with a control system similar to that used in modern aircraft.",
                RangeInKm = 80,
                ImageUrl = "https://example.com/images/wright-model-c.jpg"
            }
        };

        [HttpGet]
        public ActionResult<List<Plane>> GetAll()
        {
            _logger.LogInformation("GET all ✈✈✈ NO PARAMS ✈✈✈");

            return Ok(Planes);
        }

        [HttpGet("{id}")]
        public ActionResult<Plane> GetById(int id)
        {
            var plane = Planes.Find(p => p.Id == id);

            if (plane == null)
            {
                return NotFound();
            }

            return Ok(plane);
        }

        [HttpPost] // This attribute specifies that this method should be invoked for HTTP POST requests
        public ActionResult<Plane> Post(Plane plane) // This method handles POST requests to create a new Plane
        {
            // Check if a plane with the same id already exists in the Planes collection
            if (Planes.Any(p => p.Id == plane.Id))
            {
                // If a plane with the same id exists, return a BadRequest response
                return BadRequest();
            }

            // If no plane with the same id exists, add the new plane to the Planes collection
            Planes.Add(plane);

            // Return a CreatedAtAction response, which includes the URI of the newly created plane
            // The URI is generated by the GetById action
            return CreatedAtAction(nameof(GetById), new { id = plane.Id }, plane);
        }

        [HttpPut("{id}")]
        public ActionResult Put(int id, Plane plane)
        {

            _logger.LogInformation("PUT ✈✈✈");

            var existingPlane = Planes.Find(p => p.Id == id);
            

            if (existingPlane == null)
            {
                return NotFound();
            }

            existingPlane.Name = plane.Name;
            existingPlane.Year = plane.Year;
            existingPlane.Description = plane.Description;
            existingPlane.RangeInKm = plane.RangeInKm;

            return NoContent();
        }

        [HttpDelete("{id}")]
        public ActionResult Delete(int id)
        {

            _logger.LogInformation("DELETE ✈✈✈ {id} ✈✈✈");

            var existingPlane = Planes.Find(p => p.Id == id);

            if (existingPlane == null)
            {
                return NotFound();
            }

            Planes.Remove(existingPlane);

            return NoContent();
        }

        [HttpGet("count/{count}")]
        public ActionResult<List<Plane>> GetByCount(int count)
        {
            return Ok(Planes.Take(count).ToList());
        }

        // Search planes by name
        [HttpGet("search")]
        public ActionResult<List<Plane>> SearchByName([FromQuery] string name)
        {
            _logger.LogInformation("GET all ✈✈✈ WITH PARAMS ✈✈✈");

            return Ok(Planes.Where(p => p.Name.Contains(name)).ToList());
        }

    }
}
